#coding:utf-8

from userManager.models import UserProfile,LoginInfo
from django.shortcuts import render_to_response
from django.template import RequestContext
from userManager.forms import LoginUserForm,AddUserForm,EditUserForm
from smartcloud.common.CommonPaginator import SelfPaginator
from django.contrib import auth
from django.contrib.auth.models import User
from django import forms
from django.http import HttpResponse,HttpResponseRedirect
from django.contrib.auth.decorators import login_required
from django.core.urlresolvers import reverse
import datetime

def login(request):
	form=None
	if request.method == 'GET' and request.GET.has_key('next'):
		next = request.GET['next']
        else:
                next = '/'
	
	if request.method=="GET":
		form=LoginUserForm()
		return render_to_response('userManager/login.html',{"form":form,'next':next},RequestContext(request))
	else:
		form = LoginUserForm(request.POST)
		if form.is_valid():
			data=form.cleaned_data
			print data
			login_user=auth.authenticate(username=data['username'],password=data['password'])
			if login_user :
				auth.login(request,login_user)
				info='Login successfully'
				LoginInfo.objects.create(username=data['username'],time=datetime.datetime.now(),info=info)
				return HttpResponseRedirect(request.POST['next'])
			else:
				info='Login failed, incorrect username or password.'
				LoginInfo.objects.create(username=data['username'],time=datetime.datetime.now(),info=info)
				return render_to_response('userManager/login.html',{"form":form},RequestContext(request))
		else:
			return render_to_response('userManager/login.html',{"form":form},RequestContext(request))

@login_required
def logoutUser(request):
	    auth.logout(request)
	    return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))

@login_required
def listUser(request):
	users = UserProfile.objects.all()
        #分页功能
	lst = SelfPaginator(request,users, 2)
        kwvars = {
                  'lPage':lst,
		  'request':request,
		 }
        return render_to_response('userManager/user.list.html',kwvars,RequestContext(request))

@login_required
def editUser(request,ID):
	if request.method=='POST':
		form = EditUserForm(request.POST)
		if form.is_valid():
			data = form.cleaned_data
			print data['is_active']
			User.objects.filter(id=ID).update(email=data['email'],is_active=data['is_active'])
			UserProfile.objects.filter(user_id=ID).update(name=data['username'],phone=data['phone'],
					role=data['role'],company=data['company'])
			return HttpResponseRedirect(reverse('listuserurl'))
	else:
		user = User.objects.get(id=ID)
		userprofile=UserProfile.objects.get(user_id=ID)
		form = EditUserForm({'username':userprofile.name,'email':user.email,'phone':userprofile.phone,
			'company':userprofile.company.id,'role':userprofile.role.id,'is_active':user.is_active})
	return render_to_response('userManager/user.edit.html',{"ID":ID,"form":form},RequestContext(request))

@login_required
def deleteUser(request,ID):
	User.objects.filter(id=ID).delete()
	UserProfile.objects.filter(user_id=ID).delete()
	
	return HttpResponseRedirect(reverse('listuserurl'))

@login_required
def addUser(request):
         if request.method=='POST':
		 form = AddUserForm(request.POST)
		 if form.is_valid():
			 data=form.cleaned_data
			 email=data['email']
			 name=data['username']
			 password=data['password']
			 phone=data['phone']
			 company=data['company']
			 role=data['role']
			 is_active=data['is_active']
			 user = User.objects.create(email=email,username=email,password=password,is_active=is_active)
			 UserProfile.objects.create(user_id=user.id,name=name,phone=phone,company_id=company,role_id=role)
			 return HttpResponseRedirect(reverse('listuserurl'))
 	 else:
		 form = AddUserForm()
	 kwvars = {
		      'form':form,
		      'request':request,
		      }
     	 return render_to_response('userManager/user.add.html',kwvars,RequestContext(request))
